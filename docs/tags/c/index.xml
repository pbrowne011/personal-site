<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Pat Browne</title>
    <link>https://patbrowne.com/tags/c/</link>
    <description>Recent content in C on Pat Browne</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://patbrowne.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SAL/SAR/SHL/SHR â€” Shift</title>
      <link>https://patbrowne.com/posts/sal/</link>
      <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://patbrowne.com/posts/sal/</guid>
      <description>I&amp;rsquo;ve been working through some of the exercises from &amp;ldquo;The C Programming Language&amp;rdquo; by Kernighan and Ritchie, and ran into an issue in Chapter 2 (&amp;ldquo;Types, Operators, and Expressions&amp;rdquo;).
Exercise 2-7:
 Write a function invert(x,p,n) that returns x with the n bits that begin at position p inverted (i.e., 1 changed into 0 and vice versa), leaving the others unchanged.
 This seemed easy enough, and I wrote the following function as a solution: 1
/* invert.c */ unsigned int invert(unsigned x, int p, int n) { unsigned mask = ~(~0 &amp;lt;&amp;lt; n) &amp;lt;&amp;lt; p-(n-1); return x ^ mask; } Earlier, the authors wrote a similar function get_bits(x,p,n), and stated some assumptions they made when writing it:
 We assume that bit position 0 is at the right end and that n and p are sensible positive values.
 Originally, I thought &amp;ldquo;sensible positive values&amp;rdquo; implied maximum and minimum bounds on p and n:
 n &amp;gt; 0, and p &amp;gt;= 0: it doesn&amp;rsquo;t make sense to have n=0 (what&amp;rsquo;s the point of inverting 0 bits?), and setting p or n to a negative value has no meaning in the context of absolute position or size. sizeof(int)*8 &amp;gt; p &amp;gt;= n-1: inverting more bits than are available on the right side of a number doesn&amp;rsquo;t make sense - neither does inverting bits starting from a bit position that doesn&amp;rsquo;t exist.  So I added some error checking:
unsigned int invert(unsigned x, int p, int n) { if (p &amp;lt; n-1) { fprintf(stderr, &amp;#34;Error: position (p=%d) less than n - 1 (%d)\n&amp;#34;, p, n-1); return 0; } else if (n &amp;lt; 1) { fprintf(stderr, &amp;#34;Error: size (%d) is not a positive number\n&amp;#34;, n); return 0; } else if (p &amp;gt;= sizeof(int)*8) { fprintf(stderr, &amp;#34;Error: position (%d) is too large\n&amp;#34;, p); return 0; } unsigned mask = ~(~0 &amp;lt;&amp;lt; n) &amp;lt;&amp;lt; p-(n-1); return x ^ mask; } I set out to write some test cases, starting with several values for x and three sets of cases for n and p:</description>
    </item>
  </channel>
</rss>
