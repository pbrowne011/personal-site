<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pat Browne</title>
    <link>https://patbrowne.me/posts/</link>
    <description>Recent content in Posts on Pat Browne</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://patbrowne.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real-life examples of Markov chains</title>
      <link>https://patbrowne.me/posts/markov/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://patbrowne.me/posts/markov/</guid>
      <description>One of the classes that I&amp;rsquo;m taking this semester is on stochastic processes. Stochastic processes are sequences of random variables $X_1, X_2, ..., X_n$, where $n$ represents a specific moment in time.1 The first topic we&amp;rsquo;ve focused on this semester has been Markov chains, specific stochastic models that only depend on the current state. They are unique in that future events are only affected by where you currently are, not where you have been in the past. Markov chains arise from the law of total probability, which is a way to express the probability of an event as the sum of many other probabilities. In general, when dealing with a stochastic process, you have to condition the probability of an event on all previous events before, as they all have some effect on whether or not you reach that state. Mathematically, this can be expressed as&#xA;$$P[X_{n+1} = m \mid X_0 = i, X_1 = j, ..., X_n = k]$$ However, with Markov chains, we only need to focus on the most recent event.&#xA;$$P[X_{n+1} = m \mid X_n = k]$$ This is a remarkable simplification.</description>
    </item>
    <item>
      <title>Why do commands require tabs in a Makefile?</title>
      <link>https://patbrowne.me/posts/makefile/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://patbrowne.me/posts/makefile/</guid>
      <description>When I was first learning how to write a Makefile to compile a C program, one thing that stuck me (and almost everyone who encounters it) as odd was the requirement that each command line start with a tab character (&amp;rsquo;\t&amp;rsquo;). Makefiles are used to automate repetitive tasks (such as recompiling a C/C++ program), and have a unique syntax. They are made up of rules, which consist of a &amp;ldquo;target&amp;rdquo;, a list of &amp;ldquo;dependencies&amp;rdquo;, and a series of &amp;ldquo;commands&amp;rdquo;. They look like this:&#xA;target: dependencies command For example, suppose I want to automate two different tasks: recompiling my program after editing some of the source code, and deleting all non-source files after editing them. I could write a Makefile that looks like this:&#xA;.PHONY: clean myprogram: myprogram.c gcc myprogram.c -o myprogram clean: rm *.o *~ myprogram The .PHONY makes sure that when I run the shell command make clean, I don&amp;rsquo;t create a file named clean. Instead, I run the command underneath, which removes the files I don&amp;rsquo;t want in my directory. The other rule has a target filename myprogram, which requires a file named myprogram.</description>
    </item>
  </channel>
</rss>
